{
    // scope:
    //
    // source.php
    //   blacklist:
    //     comment
    //     constant.other.class
    //     entity
    //     meta.catch
    //     meta.class
    //     meta.function.arguments
    //     meta.use
    //     string
    //     support.class
    //     variable.other

    "scope": "source.php - comment - constant.other.class - entity - meta.catch - meta.class - meta.function.arguments - meta.use - string - support.class - variable.other",
    "completions": [
        {"trigger":"assertAction","contents":"\\$this->assertAction(${1:action}${2:, ${3:message = ''}})"},
        {"trigger":"assertController","contents":"\\$this->assertController(${1:controller}${2:, ${3:message = ''}})"},
        {"trigger":"assertHeader","contents":"\\$this->assertHeader(${1:header}${2:, ${3:message = ''}})"},
        {"trigger":"assertHeaderContains","contents":"\\$this->assertHeaderContains(${1:header}, ${2:match}${3:, ${4:message = ''}})"},
        {"trigger":"assertHeaderRegex","contents":"\\$this->assertHeaderRegex(${1:header}, ${2:pattern}${3:, ${4:message = ''}})"},
        {"trigger":"assertModule","contents":"\\$this->assertModule(${1:module}${2:, ${3:message = ''}})"},
        {"trigger":"assertNotAction","contents":"\\$this->assertNotAction(${1:action}${2:, ${3:message = ''}})"},
        {"trigger":"assertNotController","contents":"\\$this->assertNotController(${1:controller}${2:, ${3:message = ''}})"},
        {"trigger":"assertNotHeader","contents":"\\$this->assertNotHeader(${1:header}${2:, ${3:message = ''}})"},
        {"trigger":"assertNotHeaderContains","contents":"\\$this->assertNotHeaderContains(${1:header}, ${2:match}${3:, ${4:message = ''}})"},
        {"trigger":"assertNotHeaderRegex","contents":"\\$this->assertNotHeaderRegex(${1:header}, ${2:pattern}${3:, ${4:message = ''}})"},
        {"trigger":"assertNotModule","contents":"\\$this->assertNotModule(${1:module}${2:, ${3:message = ''}})"},
        {"trigger":"assertNotQuery","contents":"\\$this->assertNotQuery(${1:path}${2:, ${3:message = ''}})"},
        {"trigger":"assertNotQueryContentContains","contents":"\\$this->assertNotQueryContentContains(${1:path}, ${2:match}${3:, ${4:message = ''}})"},
        {"trigger":"assertNotQueryContentRegex","contents":"\\$this->assertNotQueryContentRegex(${1:path}, ${2:pattern}${3:, ${4:message = ''}})"},
        {"trigger":"assertNotQueryCount","contents":"\\$this->assertNotQueryCount(${1:path}, ${2:count}${3:, ${4:message = ''}})"},
        {"trigger":"assertNotRedirect","contents":"\\$this->assertNotRedirect(${1:message = ''})"},
        {"trigger":"assertNotRedirectRegex","contents":"\\$this->assertNotRedirectRegex(${1:pattern}${2:, ${3:message = ''}})"},
        {"trigger":"assertNotRedirectTo","contents":"\\$this->assertNotRedirectTo(${1:url}${2:, ${3:message = ''}})"},
        {"trigger":"assertNotResponseCode","contents":"\\$this->assertNotResponseCode(${1:code}${2:, ${3:message = ''}})"},
        {"trigger":"assertNotRoute","contents":"\\$this->assertNotRoute(${1:route}${2:, ${3:message = ''}})"},
        {"trigger":"assertNotXpath","contents":"\\$this->assertNotXpath(${1:path}${2:, ${3:message = ''}})"},
        {"trigger":"assertNotXpathContentContains","contents":"\\$this->assertNotXpathContentContains(${1:path}, ${2:match}${3:, ${4:message = ''}})"},
        {"trigger":"assertNotXpathContentRegex","contents":"\\$this->assertNotXpathContentRegex(${1:path}, ${2:pattern}${3:, ${4:message = ''}})"},
        {"trigger":"assertNotXpathCount","contents":"\\$this->assertNotXpathCount(${1:path}, ${2:count}${3:, ${4:message = ''}})"},
        {"trigger":"assertQuery","contents":"\\$this->assertQuery(${1:path}${2:, ${3:message = ''}})"},
        {"trigger":"assertQueryContentContains","contents":"\\$this->assertQueryContentContains(${1:path}, ${2:match}${3:, ${4:message = ''}})"},
        {"trigger":"assertQueryContentRegex","contents":"\\$this->assertQueryContentRegex(${1:path}, ${2:pattern}${3:, ${4:message = ''}})"},
        {"trigger":"assertQueryCount","contents":"\\$this->assertQueryCount(${1:path}, ${2:count}${3:, ${4:message = ''}})"},
        {"trigger":"assertQueryCountMax","contents":"\\$this->assertQueryCountMax(${1:path}, ${2:count}${3:, ${4:message = ''}})"},
        {"trigger":"assertQueryCountMin","contents":"\\$this->assertQueryCountMin(${1:path}, ${2:count}${3:, ${4:message = ''}})"},
        {"trigger":"assertRedirect","contents":"\\$this->assertRedirect(${1:message = ''})"},
        {"trigger":"assertRedirectRegex","contents":"\\$this->assertRedirectRegex(${1:pattern}${2:, ${3:message = ''}})"},
        {"trigger":"assertRedirectTo","contents":"\\$this->assertRedirectTo(${1:url}${2:, ${3:message = ''}})"},
        {"trigger":"assertResponseCode","contents":"\\$this->assertResponseCode(${1:code}${2:, ${3:message = ''}})"},
        {"trigger":"assertRoute","contents":"\\$this->assertRoute(${1:route}${2:, ${3:message = ''}})"},
        {"trigger":"assertXpath","contents":"\\$this->assertXpath(${1:path}${2:, ${3:message = ''}})"},
        {"trigger":"assertXpathContentContains","contents":"\\$this->assertXpathContentContains(${1:path}, ${2:match}${3:, ${4:message = ''}})"},
        {"trigger":"assertXpathContentRegex","contents":"\\$this->assertXpathContentRegex(${1:path}, ${2:pattern}${3:, ${4:message = ''}})"},
        {"trigger":"assertXpathCount","contents":"\\$this->assertXpathCount(${1:path}, ${2:count}${3:, ${4:message = ''}})"},
        {"trigger":"assertXpathCountMax","contents":"\\$this->assertXpathCountMax(${1:path}, ${2:count}${3:, ${4:message = ''}})"},
        {"trigger":"assertXpathCountMin","contents":"\\$this->assertXpathCountMin(${1:path}, ${2:count}${3:, ${4:message = ''}})"},
        {"trigger":"dispatch","contents":"\\$this->dispatch(${1:url = null})"},
        {"trigger":"getFrontController","contents":"\\$this->getFrontController()"},
        {"trigger":"getQuery","contents":"\\$this->getQuery()"},
        {"trigger":"getRequest","contents":"\\$this->getRequest()"},
        {"trigger":"getResponse","contents":"\\$this->getResponse()"},
        {"trigger":"reset","contents":"\\$this->reset()"},
        {"trigger":"resetRequest","contents":"\\$this->resetRequest()"},
        {"trigger":"resetResponse","contents":"\\$this->resetResponse()"},
        {"trigger":"url","contents":"\\$this->url(${1:urlOptions = array()}${2:, ${3:name = null}${4:, ${5:reset = false}${6:, ${7:encode = true}}}})"},
        {"trigger":"urlizeOptions","contents":"\\$this->urlizeOptions(${1:urlOptions}${2:, ${3:actionControllerModuleOnly = true}})"}
    ]
}
